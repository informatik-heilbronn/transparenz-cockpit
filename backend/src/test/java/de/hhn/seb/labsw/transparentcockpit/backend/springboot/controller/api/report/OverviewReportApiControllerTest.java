package de.hhn.seb.labsw.transparentcockpit.backend.springboot.controller.api.report;

import de.hhn.seb.labsw.transparentcockpit.backend.buisnesslogic.ProjectReportService;
import de.hhn.seb.labsw.transparentcockpit.backend.models.project.base.group.Group;
import de.hhn.seb.labsw.transparentcockpit.backend.models.project.base.input.DataType;
import de.hhn.seb.labsw.transparentcockpit.backend.models.project.base.input.InputModifier;
import de.hhn.seb.labsw.transparentcockpit.backend.models.project.report.ProjectReport;
import de.hhn.seb.labsw.transparentcockpit.backend.models.project.report.input.SingleInput;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.openMocks;

public class OverviewReportApiControllerTest {

    private final String INPUT_TEST_NAME_STRING = "testName";
    private final String INPUT_TEST_ID_STRING = "testID";
    private final String INPUT_TEST_GROUP_STRING = "testGroup";

    @Mock
    ProjectReportService projectReportService;

    @InjectMocks
    OverviewReportApiController underTest;

    @BeforeEach
    void setup() {
        openMocks(this);
    }

    @Test
    void getAllReportsWithNoReportsTest() {
        //Setup Input

        //Run function
        when(projectReportService.getAllProjectReports()).thenReturn(new ArrayList<>());
        var expectedResult = ResponseEntity.ok(Collections.emptyMap());

        //Evaluate
        assertEquals(expectedResult, underTest.getAllReports());
    }

    @Test
    void getAllReportsTest() {
        //Setup Input

        List<ProjectReport> reportList = new ArrayList<>();
        ProjectReport projectReport = setupInputProjectReport();
        reportList.add(projectReport);

        //Run function
        when(projectReportService.getAllProjectReports()).thenReturn(reportList);
        var result = underTest.getAllReports();

        //Evaluate
        assertEquals(result.getStatusCode(), HttpStatus.OK);
        assertEquals(result.getStatusCodeValue(), 200);
        assertTrue(result.getBody().containsKey(INPUT_TEST_GROUP_STRING));
    }

    ProjectReport setupInputProjectReport() {
        ProjectReport projectReport = new ProjectReport(UUID.randomUUID());

        Group groupA = new Group("A.", "Vorhabenauftrag");
        Set<InputModifier> modifiersInput = new HashSet<>();
        modifiersInput.add(InputModifier.REQUIRED);
        modifiersInput.add(InputModifier.PROJECT_NAME);
        SingleInput inputA1 = new SingleInput("1.", "Vorhabentitle", modifiersInput,
                DataType.STRING, INPUT_TEST_NAME_STRING);
        groupA.addField(inputA1);

        Set<InputModifier> modifiersInputA6 = new HashSet<>();
        modifiersInputA6.add(InputModifier.REQUIRED);
        modifiersInputA6.add(InputModifier.PROJECT_ID);
        modifiersInputA6.add(InputModifier.AUTOGENERATED);
        SingleInput inputA6 = new SingleInput("6.", "Vorhabennummer", modifiersInputA6,
                DataType.STRING, INPUT_TEST_ID_STRING);
        groupA.addField(inputA6);
        projectReport.addGroup(groupA);

        Group groupC = new Group("C.", "Vorhabenkontext");

        Set<InputModifier> modifiersInputC0 = new HashSet<>();
        modifiersInputC0.add(InputModifier.REQUIRED);
        modifiersInputC0.add(InputModifier.PROJECT_GROUP);
        SingleInput inputC0 = new SingleInput("0.", "Gruppe", modifiersInputC0,
                DataType.STRING, INPUT_TEST_GROUP_STRING);
        groupC.addField(inputC0);

        projectReport.addGroup(groupC);
        return projectReport;
    }
}
